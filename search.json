[{"path":"https://emilhvitfeldt.github.io/modeldatatoo/DESIGN.html","id":null,"dir":"","previous_headings":"","what":"Design","title":"Design","text":"package works internal pin board created pins package, used manage data sets, downloaded, read stored. board created R/aaa-board.R. data set accompanied function used fetch data set. functions thin wrapper around pins::pin_read().","code":""},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/DESIGN.html","id":"adding-a-new-data-set","dir":"","previous_headings":"","what":"Adding a new data set.","title":"Design","text":"Run usethis::use_data_raw(\"name_of_data_set\") newly created file, write code produce desired data set. include following code data set saved pin. Remember change name_of_data_set match name data set. library(pins) board <- board_folder(“data-raw/”, versioned = FALSE) board |> pin_write(name_of_data_set, “name_of_data_set”, type = “rds”) Run usethis::use_r(\"name_of_data_set\") Populate following code. Changing name_of_data_set reflect name used earlier. #’ name_of_data_set data set #’ #’ @return tibble #’ #’ @details #’ {r echo=FALSE}  #' data_name_of_data_set <- function() {  #'   pins::pin_read(pins::board_folder(\"data-raw/\"), \"name_of_data_set\")  #' }  #' #’ #’ data set looks like: #’ #’ # tibble print #’ #’ {r}  #' data_name_of_data_set()  #' #’ #’ # glimpse() #’ #’ {r}  #' tibble::glimpse(data_name_of_data_set())  #' #’ #’ @examples #’  #’ @export data_name_of_data_set <- function() { pins::pin_read(modeldatatoo_board, “name_of_data_set”) } Add information @details @source. Run devtools::document() Update NEWS.md Add data set _pkgdown.yml done!","code":""},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 modeldatatoo authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emil Hvitfeldt. Author, maintainer.","code":""},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hvitfeldt E (2023). modeldatatoo: Data Sets Useful Modeling Examples. https://github.com/EmilHvitfeldt/modeldatatoo, https://emilhvitfeldt.github.io/modeldatatoo/.","code":"@Manual{,   title = {modeldatatoo: More Data Sets Useful for Modeling Examples},   author = {Emil Hvitfeldt},   year = {2023},   note = {https://github.com/EmilHvitfeldt/modeldatatoo, https://emilhvitfeldt.github.io/modeldatatoo/}, }"},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/index.html","id":"modeldatatoo","dir":"","previous_headings":"","what":"More Data Sets Useful for Modeling Examples","title":"More Data Sets Useful for Modeling Examples","text":"modeldatatoo contains data sets used documentation testing tidymodels packages. package also contains suite simulation functions classification regression data. extension modeldata package.","code":""},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"More Data Sets Useful for Modeling Examples","text":"can install development version modeldatatoo GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"EmilHvitfeldt/modeldatatoo\")"},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"More Data Sets Useful for Modeling Examples","text":"data sets package can accessed functions prefixed data_, call like functions pins package used hood read, download, cache data.","code":"data_elevators() #> # A tibble: 35,042 × 25 #>    device_number bin     tax_b…¹ tax_lot house…² stree…³ zip_c…⁴ borough devic…⁵ #>    <chr>         <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <fct>   <chr>   #>  1 1D10028       1024795 1021    26      1614    BROADW… 10019   Manhat… Dumbwa… #>  2 1D10094       1041822 1392    25      53      E 77TH… 10021   Manhat… Dumbwa… #>  3 1D10097       1038223 1323    1       201     E 49 ST 10017   Manhat… Dumbwa… #>  4 1D10146       1080443 1274    6       40      CENTRA… <NA>    Manhat… Dumbwa… #>  5 1D10200       1085777 1074    24      651     TENTH … <NA>    Manhat… Dumbwa… #>  6 1D10301       1002075 181     16      179     FRANKL… 10013   Manhat… Dumbwa… #>  7 1D10302       1010518 606     4       121     WEST 1… 10011   Manhat… Dumbwa… #>  8 1D10303       1085955 1329    1       915     3 AVEN… 10022   Manhat… Dumbwa… #>  9 1D10304       1044058 1430    5       220     E. 76 … 10021   Manhat… Dumbwa… #> 10 1D10305       1087468 1951    4       133     MORNIN… <NA>    Manhat… Dumbwa… #> # … with 35,032 more rows, 16 more variables: lastper_insp_date <date>, #> #   approval_date <date>, manufacturer <chr>, travel_distance <chr>, #> #   speed_fpm <dbl>, capacity_lbs <dbl>, car_buffer_type <chr>, #> #   governor_type <chr>, machine_type <chr>, safety_type <chr>, #> #   mode_operation <chr>, floor_from <chr>, floor_to <chr>, latitude <dbl>, #> #   longitude <dbl>, elevators_per_building <int>, and abbreviated variable #> #   names ¹​tax_block, ²​house_number, ³​street_name, ⁴​zip_code, ⁵​device_type"},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/data_ames.html","id":null,"dir":"Reference","previous_headings":"","what":"Ames data set — data_ames","title":"Ames data set — data_ames","text":"Ames data set","code":""},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/data_ames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ames data set — data_ames","text":"","code":"data_ames()"},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/data_ames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ames data set — data_ames","text":"tibble","code":""},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/data_ames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ames data set — data_ames","text":"data set looks like:","code":""},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/data_ames.html","id":"tibble-print","dir":"Reference","previous_headings":"","what":"tibble print","title":"Ames data set — data_ames","text":"","code":"data_ames() #> # A tibble: 2,930 x 74 #>    ms_sub~1 ms_zo~2 lot_f~3 lot_a~4 street alley lot_s~5 land_~6 utili~7 lot_c~8 #>  * <fct>    <fct>     <dbl>   <int> <fct>  <fct> <fct>   <fct>   <fct>   <fct>   #>  1 One_Sto~ Reside~     141   31770 Pave   No_A~ Slight~ Lvl     AllPub  Corner  #>  2 One_Sto~ Reside~      80   11622 Pave   No_A~ Regular Lvl     AllPub  Inside  #>  3 One_Sto~ Reside~      81   14267 Pave   No_A~ Slight~ Lvl     AllPub  Corner  #>  4 One_Sto~ Reside~      93   11160 Pave   No_A~ Regular Lvl     AllPub  Corner  #>  5 Two_Sto~ Reside~      74   13830 Pave   No_A~ Slight~ Lvl     AllPub  Inside  #>  6 Two_Sto~ Reside~      78    9978 Pave   No_A~ Slight~ Lvl     AllPub  Inside  #>  7 One_Sto~ Reside~      41    4920 Pave   No_A~ Regular Lvl     AllPub  Inside  #>  8 One_Sto~ Reside~      43    5005 Pave   No_A~ Slight~ HLS     AllPub  Inside  #>  9 One_Sto~ Reside~      39    5389 Pave   No_A~ Slight~ Lvl     AllPub  Inside  #> 10 Two_Sto~ Reside~      60    7500 Pave   No_A~ Regular Lvl     AllPub  Inside  #> # ... with 2,920 more rows, 64 more variables: land_slope <fct>, #> #   neighborhood <fct>, condition_1 <fct>, condition_2 <fct>, bldg_type <fct>, #> #   house_style <fct>, overall_cond <fct>, year_built <int>, #> #   year_remod_add <int>, roof_style <fct>, roof_matl <fct>, #> #   exterior_1st <fct>, exterior_2nd <fct>, mas_vnr_type <fct>, #> #   mas_vnr_area <dbl>, exter_cond <fct>, foundation <fct>, bsmt_cond <fct>, #> #   bsmt_exposure <fct>, bsmt_fin_type_1 <fct>, bsmt_fin_sf_1 <dbl>, ..."},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/data_ames.html","id":"glimpse-","dir":"Reference","previous_headings":"","what":"glimpse()","title":"Ames data set — data_ames","text":"","code":"tibble::glimpse(data_ames()) #> Rows: 2,930 #> Columns: 74 #> $ ms_sub_class       <fct> One_Story_1946_and_Newer_All_Styles, One_Story_1946~ #> $ ms_zoning          <fct> Residential_Low_Density, Residential_High_Density, ~ #> $ lot_frontage       <dbl> 141, 80, 81, 93, 74, 78, 41, 43, 39, 60, 75, 0, 63,~ #> $ lot_area           <int> 31770, 11622, 14267, 11160, 13830, 9978, 4920, 5005~ #> $ street             <fct> Pave, Pave, Pave, Pave, Pave, Pave, Pave, Pave, Pav~ #> $ alley              <fct> No_Alley_Access, No_Alley_Access, No_Alley_Access, ~ #> $ lot_shape          <fct> Slightly_Irregular, Regular, Slightly_Irregular, Re~ #> $ land_contour       <fct> Lvl, Lvl, Lvl, Lvl, Lvl, Lvl, Lvl, HLS, Lvl, Lvl, L~ #> $ utilities          <fct> AllPub, AllPub, AllPub, AllPub, AllPub, AllPub, All~ #> $ lot_config         <fct> Corner, Inside, Corner, Corner, Inside, Inside, Ins~ #> $ land_slope         <fct> Gtl, Gtl, Gtl, Gtl, Gtl, Gtl, Gtl, Gtl, Gtl, Gtl, G~ #> $ neighborhood       <fct> North_Ames, North_Ames, North_Ames, North_Ames, Gil~ #> $ condition_1        <fct> Norm, Feedr, Norm, Norm, Norm, Norm, Norm, Norm, No~ #> $ condition_2        <fct> Norm, Norm, Norm, Norm, Norm, Norm, Norm, Norm, Nor~ #> $ bldg_type          <fct> OneFam, OneFam, OneFam, OneFam, OneFam, OneFam, Twn~ #> $ house_style        <fct> One_Story, One_Story, One_Story, One_Story, Two_Sto~ #> $ overall_cond       <fct> Average, Above_Average, Above_Average, Average, Ave~ #> $ year_built         <int> 1960, 1961, 1958, 1968, 1997, 1998, 2001, 1992, 199~ #> $ year_remod_add     <int> 1960, 1961, 1958, 1968, 1998, 1998, 2001, 1992, 199~ #> $ roof_style         <fct> Hip, Gable, Hip, Hip, Gable, Gable, Gable, Gable, G~ #> $ roof_matl          <fct> CompShg, CompShg, CompShg, CompShg, CompShg, CompSh~ #> $ exterior_1st       <fct> BrkFace, VinylSd, Wd Sdng, BrkFace, VinylSd, VinylS~ #> $ exterior_2nd       <fct> Plywood, VinylSd, Wd Sdng, BrkFace, VinylSd, VinylS~ #> $ mas_vnr_type       <fct> Stone, None, BrkFace, None, None, BrkFace, None, No~ #> $ mas_vnr_area       <dbl> 112, 0, 108, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6~ #> $ exter_cond         <fct> Typical, Typical, Typical, Typical, Typical, Typica~ #> $ foundation         <fct> CBlock, CBlock, CBlock, CBlock, PConc, PConc, PConc~ #> $ bsmt_cond          <fct> Good, Typical, Typical, Typical, Typical, Typical, ~ #> $ bsmt_exposure      <fct> Gd, No, No, No, No, No, Mn, No, No, No, No, No, No,~ #> $ bsmt_fin_type_1    <fct> BLQ, Rec, ALQ, ALQ, GLQ, GLQ, GLQ, ALQ, GLQ, Unf, U~ #> $ bsmt_fin_sf_1      <dbl> 2, 6, 1, 1, 3, 3, 3, 1, 3, 7, 7, 1, 7, 3, 3, 1, 3, ~ #> $ bsmt_fin_type_2    <fct> Unf, LwQ, Unf, Unf, Unf, Unf, Unf, Unf, Unf, Unf, U~ #> $ bsmt_fin_sf_2      <dbl> 0, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1120, 0~ #> $ bsmt_unf_sf        <dbl> 441, 270, 406, 1045, 137, 324, 722, 1017, 415, 994,~ #> $ total_bsmt_sf      <dbl> 1080, 882, 1329, 2110, 928, 926, 1338, 1280, 1595, ~ #> $ heating            <fct> GasA, GasA, GasA, GasA, GasA, GasA, GasA, GasA, Gas~ #> $ heating_qc         <fct> Fair, Typical, Typical, Excellent, Good, Excellent,~ #> $ central_air        <fct> Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, Y, ~ #> $ electrical         <fct> SBrkr, SBrkr, SBrkr, SBrkr, SBrkr, SBrkr, SBrkr, SB~ #> $ first_flr_sf       <int> 1656, 896, 1329, 2110, 928, 926, 1338, 1280, 1616, ~ #> $ second_flr_sf      <int> 0, 0, 0, 0, 701, 678, 0, 0, 0, 776, 892, 0, 676, 0,~ #> $ gr_liv_area        <int> 1656, 896, 1329, 2110, 1629, 1604, 1338, 1280, 1616~ #> $ bsmt_full_bath     <dbl> 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, ~ #> $ bsmt_half_bath     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ #> $ full_bath          <int> 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 2, ~ #> $ half_bath          <int> 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, ~ #> $ bedroom_abv_gr     <int> 3, 2, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 2, 1, 4, 4, ~ #> $ kitchen_abv_gr     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ~ #> $ tot_rms_abv_grd    <int> 7, 5, 6, 8, 6, 7, 6, 5, 5, 7, 7, 6, 7, 5, 4, 12, 8,~ #> $ functional         <fct> Typ, Typ, Typ, Typ, Typ, Typ, Typ, Typ, Typ, Typ, T~ #> $ fireplaces         <int> 2, 0, 0, 2, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, ~ #> $ garage_type        <fct> Attchd, Attchd, Attchd, Attchd, Attchd, Attchd, Att~ #> $ garage_finish      <fct> Fin, Unf, Unf, Fin, Fin, Fin, Fin, RFn, RFn, Fin, F~ #> $ garage_cars        <dbl> 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, ~ #> $ garage_area        <dbl> 528, 730, 312, 522, 482, 470, 582, 506, 608, 442, 4~ #> $ garage_cond        <fct> Typical, Typical, Typical, Typical, Typical, Typica~ #> $ paved_drive        <fct> Partial_Pavement, Paved, Paved, Paved, Paved, Paved~ #> $ wood_deck_sf       <int> 210, 140, 393, 0, 212, 360, 0, 0, 237, 140, 157, 48~ #> $ open_porch_sf      <int> 62, 0, 36, 0, 34, 36, 0, 82, 152, 60, 84, 21, 75, 0~ #> $ enclosed_porch     <int> 0, 0, 0, 0, 0, 0, 170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~ #> $ three_season_porch <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ #> $ screen_porch       <int> 0, 120, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 140, ~ #> $ pool_area          <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~ #> $ pool_qc            <fct> No_Pool, No_Pool, No_Pool, No_Pool, No_Pool, No_Poo~ #> $ fence              <fct> No_Fence, Minimum_Privacy, No_Fence, No_Fence, Mini~ #> $ misc_feature       <fct> None, None, Gar2, None, None, None, None, None, Non~ #> $ misc_val           <int> 0, 0, 12500, 0, 0, 0, 0, 0, 0, 0, 0, 500, 0, 0, 0, ~ #> $ mo_sold            <int> 5, 6, 6, 4, 3, 6, 4, 1, 3, 6, 4, 3, 5, 2, 6, 6, 6, ~ #> $ year_sold          <int> 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 201~ #> $ sale_type          <fct> WD , WD , WD , WD , WD , WD , WD , WD , WD , WD , W~ #> $ sale_condition     <fct> Normal, Normal, Normal, Normal, Normal, Normal, Nor~ #> $ sale_price         <int> 215000, 105000, 172000, 244000, 189900, 195500, 213~ #> $ longitude          <dbl> -93.61975, -93.61976, -93.61939, -93.61732, -93.638~ #> $ latitude           <dbl> 42.05403, 42.05301, 42.05266, 42.05125, 42.06090, 4~"},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/data_ames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ames data set — data_ames","text":"","code":"if (FALSE) { data_ames() }"},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/data_elevators.html","id":null,"dir":"Reference","previous_headings":"","what":"elevators data set — data_elevators","title":"elevators data set — data_elevators","text":"elevators data set","code":""},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/data_elevators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"elevators data set — data_elevators","text":"","code":"data_elevators()"},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/data_elevators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"elevators data set — data_elevators","text":"tibble","code":""},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/data_elevators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"elevators data set — data_elevators","text":"data set looks like:","code":""},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/data_elevators.html","id":"tibble-print","dir":"Reference","previous_headings":"","what":"tibble print","title":"elevators data set — data_elevators","text":"","code":"data_elevators() #> # A tibble: 35,042 x 25 #>    device_number bin     tax_b~1 tax_lot house~2 stree~3 zip_c~4 borough devic~5 #>    <chr>         <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <fct>   <chr>   #>  1 1D10028       1024795 1021    26      1614    BROADW~ 10019   Manhat~ Dumbwa~ #>  2 1D10094       1041822 1392    25      53      E 77TH~ 10021   Manhat~ Dumbwa~ #>  3 1D10097       1038223 1323    1       201     E 49 ST 10017   Manhat~ Dumbwa~ #>  4 1D10146       1080443 1274    6       40      CENTRA~ <NA>    Manhat~ Dumbwa~ #>  5 1D10200       1085777 1074    24      651     TENTH ~ <NA>    Manhat~ Dumbwa~ #>  6 1D10301       1002075 181     16      179     FRANKL~ 10013   Manhat~ Dumbwa~ #>  7 1D10302       1010518 606     4       121     WEST 1~ 10011   Manhat~ Dumbwa~ #>  8 1D10303       1085955 1329    1       915     3 AVEN~ 10022   Manhat~ Dumbwa~ #>  9 1D10304       1044058 1430    5       220     E. 76 ~ 10021   Manhat~ Dumbwa~ #> 10 1D10305       1087468 1951    4       133     MORNIN~ <NA>    Manhat~ Dumbwa~ #> # ... with 35,032 more rows, 16 more variables: lastper_insp_date <date>, #> #   approval_date <date>, manufacturer <chr>, travel_distance <chr>, #> #   speed_fpm <dbl>, capacity_lbs <dbl>, car_buffer_type <chr>, #> #   governor_type <chr>, machine_type <chr>, safety_type <chr>, #> #   mode_operation <chr>, floor_from <chr>, floor_to <chr>, latitude <dbl>, #> #   longitude <dbl>, elevators_per_building <int>, and abbreviated variable #> #   names 1: tax_block, 2: house_number, 3: street_name, 4: zip_code, ..."},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/data_elevators.html","id":"glimpse-","dir":"Reference","previous_headings":"","what":"glimpse()","title":"elevators data set — data_elevators","text":"","code":"tibble::glimpse(data_elevators()) #> Rows: 35,042 #> Columns: 25 #> $ device_number          <chr> \"1D10028\", \"1D10094\", \"1D10097\", \"1D10146\", \"1D~ #> $ bin                    <chr> \"1024795\", \"1041822\", \"1038223\", \"1080443\", \"10~ #> $ tax_block              <chr> \"1021\", \"1392\", \"1323\", \"1274\", \"1074\", \"181\", ~ #> $ tax_lot                <chr> \"26\", \"25\", \"1\", \"6\", \"24\", \"16\", \"4\", \"1\", \"5\"~ #> $ house_number           <chr> \"1614\", \"53\", \"201\", \"40\", \"651\", \"179\", \"121\",~ #> $ street_name            <chr> \"BROADWAY\", \"E 77TH ST\", \"E 49 ST\", \"CENTRAL PA~ #> $ zip_code               <chr> \"10019\", \"10021\", \"10017\", NA, NA, \"10013\", \"10~ #> $ borough                <fct> Manhattan, Manhattan, Manhattan, Manhattan, Man~ #> $ device_type            <chr> \"Dumbwaiter\", \"Dumbwaiter\", \"Dumbwaiter\", \"Dumb~ #> $ lastper_insp_date      <date> 2015-09-18, 2015-08-07, 2015-04-02, 2014-10-15~ #> $ approval_date          <date> 2006-03-07, 2006-05-15, 1998-09-21, 2010-08-02~ #> $ manufacturer           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,~ #> $ travel_distance        <chr> \"16'4\\\"\", NA, \"23\", \"8'\", \"24 FT\", \"9'0\", \"12'0~ #> $ speed_fpm              <dbl> 50, 25, 50, 50, 50, 50, 50, 50, 50, 100, 100, 5~ #> $ capacity_lbs           <dbl> 500, 500, 500, 500, NA, 500, 300, 500, 500, 500~ #> $ car_buffer_type        <chr> \"Spring\", NA, NA, NA, NA, NA, \"Spring\", NA, NA,~ #> $ governor_type          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,~ #> $ machine_type           <chr> NA, \"OD\", \"BD\", \"BD\", NA, \"OD\", \"OD\", \"BD\", \"OG~ #> $ safety_type            <chr> \"I\", NA, \"I\", NA, NA, \"I\", \"I\", NA, \"I\", NA, NA~ #> $ mode_operation         <chr> \"A\", \"P\", \"A\", \"A\", NA, \"A\", \"A\", \"A\", \"A\", \"P\"~ #> $ floor_from             <chr> \"B\", \"SB\", \"B\", \"B\", \"C\", \"BAS\", \"B\", \"C\", \"BMT~ #> $ floor_to               <chr> \"1\", \"3\", \"2\", \"1\", \"G\", \"1\", \"1\", \"2\", \"4\", \"5~ #> $ latitude               <dbl> 40.76088, 40.77502, 40.75518, 40.76500, 40.7622~ #> $ longitude              <dbl> -73.98391, -73.96256, -73.97079, -73.97573, -73~ #> $ elevators_per_building <int> 11, 2, 1, 1, 2, 2, 1, 1, 1, 5, 5, 1, 2, 1, 1, 2~"},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/data_elevators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"elevators data set — data_elevators","text":"","code":"if (FALSE) { data_elevators() }"},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/internal_board.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal pins board — internal_board","title":"Internal pins board — internal_board","text":"Pins board used internally manage download, reading, caching data sets.","code":""},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/internal_board.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal pins board — internal_board","text":"","code":"internal_board()"},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/internal_board.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal pins board — internal_board","text":"pins board","code":""},{"path":"https://emilhvitfeldt.github.io/modeldatatoo/reference/internal_board.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal pins board — internal_board","text":"","code":"internal_board() #> Pin board <pins_board_url> #> Cache size: 0 #> Pins [2]: 'ames', 'elevators'"}]
